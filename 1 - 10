#Multiples of 3 and 5
#Problem 1
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.
def Multiples(n):
    result = 0
    for i in range(n):
        if i % 3 == 0 or i % 5 == 0:
            result += i
    return result
print(Multiples(1000)) #233168


# Even Fibonacci numbers
# Problem 2
# Published on Friday, 19th October 2001, 06:00 pm; Solved by 511939; Difficulty rating: 5%
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

def EvenFib(SeqValueBound):
    a, b, sum= 1, 2, 0
    while b <= SeqValueBound:
        if b % 2 == 0:
            sum += b
        a, b = b, a + b
    return sum
print(EvenFib(4e6)) #4616732


# Largest prime factor
# Problem 3
# The prime factors of 13195 are 5, 7, 13 and 29.
#
# What is the largest prime factor of the number 600851475143 ?

def largestPrimeFactor(n):
    a = int(np.sqrt(n)+1)
    for i in range(2, a):
        if n % i == 0 and i != n:
            return largestPrimeFactor(max(i,n/i))
    return n
print(largestPrimeFactor(600851475143))


#Largest palindrome product
#Problem 4
#A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

#Find the largest palindrome made from the product of two 3-digit numbers.

#Find palindrome string
def palindrome_str(num):
    return str(num) == str(num)[::-1]

def palindrome_num(num):
    reverse = 0
    org = num
    if num < 10:
        return True
    if num % 10 == 0:
        return False
    while num >= 1:
        reverse = (reverse * 10) + (num % 10)
        num = int(num / 10)
    if reverse == org:
        return True
    else: return False

def largestPalidrome(n):
    upperBound = 10**n-1
    lowerBound = 10**(n-1)-1
    a = upperBound
    maxPali = 0
    while a > lowerBound:
        #print(a)
        b = upperBound
        while b >= a:
            prod = a * b
            if prod > maxPali and palindrome_str(prod):
            #if prod > maxPali and str(prod) == str(prod)[::-1]:
                maxPali = a* b
            b -= 1
        a -= 1
    return maxPali
print(largestPalidrome(3))


#Smallest multiple
#Problem 5
#2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

#What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

def smallestMultiple(n):
    resut = 1
    for a in range(2, n+1):
        if resut % a != 0:
            for b in range (2, int(a/2)):
                if a > 1 and a % b == 0:
                    a /= b
            resut *= a
    return resut
tstart = time.time()
print(smallestMultiple(20))


#Sum square difference
#Problem 6
#The sum of the squares of the first ten natural numbers is,

#1^2 + 2^2 + ... + 10^2 = 385
#The square of the sum of the first ten natural numbers is,

#(1 + 2 + ... + 10)2 = 552 = 3025
#Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

#Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

def Diff(n):
    dif = 0
    for i in range(1, n+1):
        for j in range(i+1, n+1):
            dif += 2*i*j
    return dif
print(Diff(100))
