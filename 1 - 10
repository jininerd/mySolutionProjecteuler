#Multiples of 3 and 5
#Problem 1
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.
def Multiples(n):
    result = 0
    for i in range(n):
        if i % 3 == 0 or i % 5 == 0:
            result += i
    return result
print(Multiples(1000)) #233168


# Even Fibonacci numbers
# Problem 2
# Published on Friday, 19th October 2001, 06:00 pm; Solved by 511939; Difficulty rating: 5%
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

def EvenFib(SeqValueBound):
    a, b, sum= 1, 2, 0
    while b <= SeqValueBound:
        if b % 2 == 0:
            sum += b
        a, b = b, a + b
    return sum
print(EvenFib(4e6)) #4616732


# Largest prime factor
# Problem 3
# The prime factors of 13195 are 5, 7, 13 and 29.
#
# What is the largest prime factor of the number 600851475143 ?

def largestPrimeFactor(n):
    a = int(np.sqrt(n)+1)
    for i in range(2, a):
        if n % i == 0 and i != n:
            return largestPrimeFactor(max(i,n/i))
    return n
print(largestPrimeFactor(600851475143))


#Largest palindrome product
#Problem 4
#A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

#Find the largest palindrome made from the product of two 3-digit numbers.

#Find palindrome string
def palindrome_str(num):
    return str(num) == str(num)[::-1]

def palindrome_num(num):
    reverse = 0
    org = num
    if num < 10:
        return True
    if num % 10 == 0:
        return False
    while num >= 1:
        reverse = (reverse * 10) + (num % 10)
        num = int(num / 10)
    if reverse == org:
        return True
    else: return False

def largestPalidrome(n):
    upperBound = 10**n-1
    lowerBound = 10**(n-1)-1
    a = upperBound
    maxPali = 0
    while a > lowerBound:
        #print(a)
        b = upperBound
        while b >= a:
            prod = a * b
            if prod > maxPali and palindrome_str(prod):
            #if prod > maxPali and str(prod) == str(prod)[::-1]:
                maxPali = a* b
            b -= 1
        a -= 1
    return maxPali
print(largestPalidrome(3))


#Smallest multiple
#Problem 5
#2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

#What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

def smallestMultiple(n):
    resut = 1
    for a in range(2, n+1):
        if resut % a != 0:
            for b in range (2, int(a/2)):
                if a > 1 and a % b == 0:
                    a /= b
            resut *= a
    return resut
tstart = time.time()
print(smallestMultiple(20))


#Sum square difference
#Problem 6
#The sum of the squares of the first ten natural numbers is,

#1^2 + 2^2 + ... + 10^2 = 385
#The square of the sum of the first ten natural numbers is,

#(1 + 2 + ... + 10)2 = 552 = 3025
#Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

#Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

def Diff(n):
    dif = 0
    for i in range(1, n+1):
        for j in range(i+1, n+1):
            dif += 2*i*j
    return dif
print(Diff(100))



# 10001st prime
# Problem 7
# By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
#
# What is the 10 001st prime number?
def isPrime(n):
    if n == 1:
        return False
    for x in range(2, int(np.sqrt(n))+1):
        if n % x == 0:
            return False
    return True
def ithPrime(n):
    num = 3
    while(True):
        if n == 1:
            return num-2
        if isPrime(num):
            n -= 1
        num += 2
print(ithPrime(10001))


# Largest product in a series
# Problem 8
# The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
#
# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450
#
# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

def findNonZeroProd(str, ith, n):
    i = ith
    prod = 1
    while i < len(str):
        if i + n-1 < len(str):
            for j in range(n - 1, -1, -1):
                if str[i+j] == '0':
                    return findNonZeroProd(str, i+j+1, n)
            for j in range(n):
                prod *= int(str[i+j])
            return i+n, prod
        else:
            prod = 1
            for j in range(len(str)-1, i, -1):
                prod *= int(str[j])
            return len(str), prod

def greatestProd(str, n):
    prodbuf = []
    #find first n-digit product
    i, prod0 = findNonZeroProd(str,0,n)
    prodbuf.append(prod0)
    while i < len(str):
        if str[i] != '0':
            prod0 *= (int(str[i])/int(str[i-n]))
            prodbuf.append(prod0)
            i += 1
        else:
            i, prod0 = findNonZeroProd(str, i, n)
            prodbuf.append(prod0)

    return max(prodbuf)

str = '73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450'

print(greatestProd(str,13))


# Special Pythagorean triplet
# Problem 9
# A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
#
# a^2 + b^2 = c^2
# For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
#
# There exists exactly one Pythagorean triplet for which a + b + c = 1000.
# Find the product abc.

def findProduct(n):
    for c in range(int(n/2), 4, -1):
        for b in range(c-1, 3, -1):
            if (n-b-c)*(n-b-c) + b*b == c*c:
                return (n-b-c)*b*c
print(findProduct(1000))

# Summation of primes
# Problem 10
# The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
#
# Find the sum of all the primes below two million.

def sumPrime(n):
    full = [True] * int(n+1)
    for i in range(4, int(n)+1, 2):
        full[i] = False
    full[0] = full[1] = False

    for i in range(3, int(np.sqrt(n)+1), 2):
        if (full[i] is True):
            j = i
            while i*j < n+1:
                #print(i*j)
                full[i*j] = False
                j += 2
    sum = 0
    for ind, val in enumerate(full):
        if val == True:
            sum += ind
    return sum
print(sumPrime(2e6))






