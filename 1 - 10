#Multiples of 3 and 5
#Problem 1
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.
def Multiples(n):
    result = 0
    for i in range(n):
        if i % 3 == 0 or i % 5 == 0:
            result += i
    return result
print(Multiples(1000)) #233168


# Even Fibonacci numbers
# Problem 2
# Published on Friday, 19th October 2001, 06:00 pm; Solved by 511939; Difficulty rating: 5%
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

def EvenFib(SeqValueBound):
    a, b, sum= 1, 2, 0
    while b <= SeqValueBound:
        if b % 2 == 0:
            sum += b
        a, b = b, a + b
    return sum
print(EvenFib(4e6)) #4616732


# Largest prime factor
# Problem 3
# The prime factors of 13195 are 5, 7, 13 and 29.
#
# What is the largest prime factor of the number 600851475143 ?

def largestPrimeFactor(n):
    a = int(np.sqrt(n)+1)
    for i in range(2, a):
        if n % i == 0 and i != n:
            return largestPrimeFactor(max(i,n/i))
    return n
print(largestPrimeFactor(600851475143))
